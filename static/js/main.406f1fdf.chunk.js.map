{"version":3,"sources":["components/MainNavigation/MainNavigation.jsx","components/HomePage/HomePage.jsx","components/PersonName/PersonName.jsx","components/PersonRow/PersonRow.jsx","types.js","components/SortingHeader/SortingHeader.jsx","components/PeopleTable/PeopleTable.jsx","components/PeoplePage/PeoplePage.jsx","api/people.js","components/NotFoundPage/NotFoundPage.jsx","App.js","App.jsx","index.jsx"],"names":["MainNavigation","className","to","activeClassName","exact","HomePage","PersonName","name","wasFound","sex","slug","search","useLocation","searchParams","URLSearchParams","toString","classnames","defaultProps","PersonRow","PropTypes","shape","string","isRequired","born","number","died","motherName","fatherName","person","pathname","slice","lastIndexOf","mother","father","SortingHeader","sortOrder","header","sortingHeaders","history","useHistory","sortOrderParam","get","sortByHeader","pathToIcon","toLowerCase","onClick","includes","set","push","alt","src","headers","PeopleTable","people","map","key","nanoid","sortByName","left","right","localeCompare","sortBySex","sortByBorn","sortByDied","sortByNameDesc","sortBySexDesc","sortByBornDesc","sortByDiedDesc","PeoplePage","useState","setPeople","appliedQuery","query","setQuery","sortBy","useEffect","fetch","then","response","json","persons","find","individual","visiblePeople","lowerQuery","filter","sort","applyQuery","useCallback","debounce","newQuery","delete","type","placeholder","value","onChange","target","NotFoundPage","App","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.406f1fdf.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport 'bulma';\nimport './MainNavigation.scss';\n\nexport const MainNavigation = () => (\n  <nav className=\"navbar\">\n    <NavLink\n      to=\"/\"\n      className=\"navbar-item is-tab\"\n      activeClassName=\"is-active\"\n      exact\n    >\n      Home\n    </NavLink>\n    <NavLink\n      to=\"/people\"\n      className=\"navbar-item is-tab\"\n      activeClassName=\"is-active\"\n    >\n      People\n    </NavLink>\n  </nav>\n);\n","import React from 'react';\n\nimport 'bulma';\nimport './HomePage.scss';\n\nexport const HomePage = () => (\n  <div className=\"home-page content is-large\">\n    <h1>Home Page</h1>\n  </div>\n);\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport classnames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport 'bulma';\nimport './PersonName.scss';\n\nexport const PersonName = ({ name, wasFound, sex, slug }) => {\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n\n  return (\n    <>\n      {wasFound\n        ? (\n          <Link\n            to={`/people/${slug}?${searchParams.toString()}`}\n            className={classnames({\n              'found-man': sex === 'm',\n              'found-woman': sex === 'f',\n            })}\n          >\n            {name}\n          </Link>\n        )\n        : <span className=\"not-found\">{name}</span>}\n    </>\n  );\n};\n\nPersonName.propTypes = {\n  name: PropTypes.string,\n  wasFound: PropTypes.bool,\n  sex: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n};\n\nPersonName.defaultProps = {\n  wasFound: false,\n  name: '',\n};\n","import React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport classnames from 'classnames';\nimport { PersonName } from '../PersonName';\nimport { PersonType } from '../../types';\n\nimport 'bulma';\nimport './PersonRow.scss';\n\nexport const PersonRow = ({ person }) => {\n  const { pathname } = useLocation();\n  const slug = pathname.slice(pathname.lastIndexOf('/') + 1);\n\n  return (\n    <tr className={classnames('Person',\n      {\n        'choosen-person': slug === person.slug,\n      })}\n    >\n      <td>\n        <PersonName\n          name={person.name}\n          sex={person.sex}\n          slug={person.slug}\n          wasFound\n        />\n      </td>\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        <PersonName\n          name={person.motherName}\n          sex={person.mother ? 'f' : ''}\n          slug={person.mother ? person.mother.slug : ''}\n          wasFound={!!person.mother}\n        />\n      </td>\n      <td>\n        <PersonName\n          name={person.fatherName}\n          sex={person.father ? 'm' : ''}\n          slug={person.father ? person.father.slug : ''}\n          wasFound={!!person.father}\n        />\n      </td>\n    </tr>\n  );\n};\n\nPersonRow.propTypes = {\n  person: PersonType.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const PersonType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  sex: PropTypes.string.isRequired,\n  born: PropTypes.number.isRequired,\n  died: PropTypes.number.isRequired,\n  motherName: PropTypes.string,\n  fatherName: PropTypes.string,\n});\n","import React from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport 'bulma';\nimport './SortingHeader.scss';\n\nexport const SortingHeader = ({ header, sortingHeaders }) => {\n  const history = useHistory();\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n  const sortOrderParam = searchParams.get('sortOrder');\n  const sortByHeader = searchParams.get('sortBy');\n  let sortOrder;\n\n  if (sortOrderParam) {\n    sortOrder = sortOrderParam === 'asc' ? 'desc' : 'asc';\n  } else {\n    sortOrder = 'asc';\n  }\n\n  let pathToIcon = 'https://raw.githubusercontent.com/Artem20201610/react_people-table-advanced/master/public/images/sort_asc.png';\n\n  if (header.toLowerCase() === sortByHeader) {\n    pathToIcon = sortOrder === 'asc'\n      ? 'https://raw.githubusercontent.com/Artem20201610/react_people-table-advanced/master/public/images/sort_desc.png'\n      : 'https://raw.githubusercontent.com/Artem20201610/react_people-table-advanced/master/public/images/sort_asc.png';\n  }\n\n  const handleClick = () => {\n    if (sortingHeaders.includes(header)) {\n      searchParams.set('sortBy', header.toLowerCase());\n      searchParams.set('sortOrder', sortOrder);\n      history.push({\n        search: searchParams.toString(),\n      });\n    }\n  };\n\n  return (\n    <th\n      onClick={handleClick}\n    >\n      {`${header}${searchParams.get('sortBy') === header.toLowerCase()\n        ? '*'\n        : ''}`}\n      {(sortingHeaders.includes(header))\n        ? <img alt=\"sort order\" src={pathToIcon} />\n        : ''}\n    </th>\n  );\n};\n\nSortingHeader.propTypes = {\n  header: PropTypes.string.isRequired,\n  sortingHeaders: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { PersonRow } from '../PersonRow';\nimport { SortingHeader } from '../SortingHeader';\nimport { PersonType } from '../../types';\n\nimport 'bulma';\nimport './PeopleTable.scss';\n\nconst headers = ['Name', 'Sex', 'Born', 'Died', 'Mother', 'Father'];\nconst sortingHeaders = ['Name', 'Sex', 'Born', 'Died'];\n\nexport const PeopleTable = ({ people }) => (\n  <table className=\"PeopleTable\">\n    <thead>\n      <tr>\n        {headers.map(header => (\n          <SortingHeader\n            header={header}\n            sortingHeaders={sortingHeaders}\n            key={nanoid()}\n          />\n        ))}\n      </tr>\n    </thead>\n    <tbody>\n      {people.map(person => (\n        <PersonRow\n          key={nanoid()}\n          person={person}\n          people={people}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n\nPeopleTable.propTypes = {\n  people: PropTypes.arrayOf(PersonType.isRequired).isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport debounce from 'lodash/debounce';\nimport { PeopleTable } from '../PeopleTable';\n\nimport { getPeople } from '../../api/people';\n\nimport 'bulma';\nimport './PeoplePage.scss';\n\nconst sortByName = (left, right) => (\n  left.name.localeCompare(right.name)\n);\n\nconst sortBySex = (left, right) => (\n  left.sex.localeCompare(right.sex)\n);\n\nconst sortByBorn = (left, right) => (\n  left.born - right.born\n);\n\nconst sortByDied = (left, right) => (\n  left.died - right.died\n);\n\nconst sortByNameDesc = (left, right) => (\n  right.name.localeCompare(left.name)\n);\n\nconst sortBySexDesc = (left, right) => (\n  right.sex.localeCompare(left.sex)\n);\n\nconst sortByBornDesc = (left, right) => (\n  right.born - left.born\n);\n\nconst sortByDiedDesc = (left, right) => (\n  right.died - left.died\n);\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState([]);\n  const history = useHistory();\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n  const appliedQuery = searchParams.get('query') || '';\n  const [query, setQuery] = useState(appliedQuery);\n  const sortBy = searchParams.get('sortBy') || '';\n  const sortOrder = searchParams.get('sortOrder');\n\n  useEffect(() => {\n    getPeople()\n      .then((persons) => {\n        setPeople(persons);\n      });\n  }, []);\n\n  let visiblePeople = [];\n\n  if (appliedQuery) {\n    const lowerQuery = appliedQuery.toLowerCase();\n\n    visiblePeople = people.filter((person) => {\n      const { name, motherName, fatherName } = person;\n\n      return (\n        (name ? name.toLowerCase().includes(lowerQuery) : false)\n        || (motherName ? motherName.toLowerCase().includes(lowerQuery) : false)\n        || (fatherName ? fatherName.toLowerCase().includes(lowerQuery) : false)\n      );\n    });\n  } else {\n    visiblePeople = people;\n  }\n\n  if (sortBy) {\n    switch (sortBy) {\n      case 'name': {\n        if (sortOrder === 'asc') {\n          visiblePeople.sort(sortByName);\n        } else {\n          visiblePeople.sort(sortByNameDesc);\n        }\n\n        break;\n      }\n\n      case 'sex': {\n        if (sortOrder === 'asc') {\n          visiblePeople.sort(sortBySex);\n        } else {\n          visiblePeople.sort(sortBySexDesc);\n        }\n\n        break;\n      }\n\n      case 'born': {\n        if (sortOrder === 'asc') {\n          visiblePeople.sort(sortByBorn);\n        } else {\n          visiblePeople.sort(sortByBornDesc);\n        }\n\n        break;\n      }\n\n      case 'died': {\n        if (sortOrder === 'asc') {\n          visiblePeople.sort(sortByDied);\n        } else {\n          visiblePeople.sort(sortByDiedDesc);\n        }\n\n        break;\n      }\n\n      default: {\n        break;\n      }\n    }\n  }\n\n  const applyQuery = useCallback(\n    debounce((newQuery) => {\n      if (newQuery) {\n        searchParams.set('query', newQuery);\n      } else {\n        searchParams.delete('query');\n      }\n\n      history.push({\n        search: searchParams.toString(),\n      });\n    }, 500),\n    [],\n  );\n\n  const handleQueryChange = ({ target }) => {\n    setQuery(target.value);\n    applyQuery(target.value);\n  };\n\n  return (\n    <>\n      <div className=\" people-page content is-large\">\n        <h1>People Page</h1>\n\n        <form>\n          <input\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Filter\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n        </form>\n        <PeopleTable people={visiblePeople} />\n      </div>\n    </>\n  );\n};\n","export const getPeople = () => (\n  // eslint-disable-next-line\n  fetch('https://mate-academy.github.io/react_people-table/api/people.json')\n    .then(response => response.json())\n    .then(persons => persons.map(person => ({\n      ...person,\n      mother: persons\n        .find(individual => person.motherName === individual.name),\n      father: persons\n        .find(individual => person.fatherName === individual.name),\n    })))\n);\n","import React from 'react';\n\nimport 'bulma';\nimport './NotFoundPage.scss';\n\nexport const NotFoundPage = () => (\n  <div className=\"not-found-page content is-large\">\n    <h1>Page Not Found</h1>\n  </div>\n);\n","import App from './App.jsx';\n\nexport default App;\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport { MainNavigation } from './components/MainNavigation';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nimport 'bulma';\nimport './App.scss';\n\nconst App = () => (\n  <>\n    <header>\n      <MainNavigation />\n    </header>\n\n    <section className=\"section\">\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/people\">\n            <PeoplePage />\n          </Route>\n          <Route path=\"/\" exact>\n            <HomePage />\n          </Route>\n\n          <Redirect path=\"/home\" to=\"/\" exact />\n\n          <NotFoundPage />\n        </Switch>\n      </div>\n    </section>\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}